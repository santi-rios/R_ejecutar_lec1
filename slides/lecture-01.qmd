---
title: "Empieza a programar con R"
subtitle: "Introducción"
format: 
    live-revealjs: 
        scrollable: true
webr:
    packages: 
        - ggplot2
# pyodide: 
#     packages: 
#         - scikit-learn
#         - pandas
#         - matplotlib
#         - seaborn
#         - statsmodels
engine: knitr
---

{{< include ../_extensions/r-wasm/live/_knitr.qmd >}}

## Overview

The goal of this

---

## Introduction

Linear regression is a fundamental statistical technique used to model the relationship between a dependent variable and one or more independent variables.

This presentation will cover:

1. Basic Concepts
2. Implementation in R and Python
3. Model Evaluation
4. Assumptions and Diagnostics

---

## Basic Concepts

Linear regression aims to find the best-fitting straight line through the data points.

The general form of a simple linear regression model is:

$$Y = \beta_0 + \beta_1X + \epsilon$$

Where:

- $Y$ is the dependent variable
- $X$ is the independent variable
- $\beta_0$ is the y-intercept
- $\beta_1$ is the slope
- $\epsilon$ is the error term

---

## Generating Data

Let's look at how to implement linear regression in R and Python by first simulating some data


## Operaciones Aritméticas Básicas

Ejecuta el siguiente código y observa los resultados:

```{webr}

# Suma
3 + 5

```


```{webr}

# Resta
10 - 4


```


```{webr}

# Multiplicación
7 * 6


```


```{webr}

# División
20 / 4


```


```{webr}
# Potencia
2^3

```


---

## NOTAS

- Observa cómo al ejecutar el código, se muestra el resultado de cada operación aritmética en un mensaje. Este es el resultado y es conocido como la salida de la operación. En los textos y tutoriales de R, se le conoce como "output".
- En R, el símbolo `#` se utiliza para hacer comentarios. Los comentarios son útiles para explicar el código y hacerlo más legible. R ignora los comentarios al ejecutar el código.
- Observa como en el siguiente código si comentamos las operaciones, no tendremos salida.

```{webr}

# Suma
# 3 + 5

# División
# 20 / 4

# Potencia
# 2^3

```

## Ejericio

Realiza la operación que se muestran a continuación. Asignalo a una variable llamada `operaciones` y luego imprime el resultado.

```{webr}
#| exercise: ex_1_r

# Suma 4 más 7 y divide el resultado entre 2 y asígnalo a la variable.
# NOTA: Utiliza el paréntesis para indicar el orden de las operaciones.
_______

# imprimir el resultado
______
```


```{webr}
#| exercise: ex_1_r
#| check: true

operaciones <- (4+7)/2

operaciones

if (isTRUE(all.equal(.result, operaciones))) {
  list(correct = TRUE, message = "Correcto!")
} else {
  list(correct = FALSE, message = "Incorrecto.")
}
```


## Asignación de Variables

En R, puedes asignar valores a variables utilizando el operador `<-` o el operador `=` (menos utilizado). Una variable te permite almacenar un valor y hacer referencia a él en tu código. En el siguiente ejemplo, asignamos el valor 10 a la variable `x` y luego imprimimos el valor de `x`:

```{webr}

# Asignación de variables
x <- 10

# Imprimir el valor de x
x

```

## Operaciones con Variables

Puedes realizar operaciones aritméticas con variables. 

```{webr}

a <- 10
b <- 5

a * b

```

## Vectores

En R, un vector es una estructura de datos que almacena una secuencia de valores. Puedes crear un vector utilizando la función `c()` (que significa "concatenar"). Piénsalo como una lista de valores. Observa cómo al correr el código, no tenemos salida. Esto es porque solo hemos creado el vector, pero no hemos hecho nada con él. Es decir, R almacenó el vector en la variable `mis_numeros` en la memoria, pero no mostrará nada hasta que le pidamos que haga algo con él.

```{webr}

# Crear un vector de números
mis_numeros <- c(1, 2, 3, 4, 5)

```

## utilidad

Los vectores son útiles para almacenar datos y realizar operaciones en ellos. Por ejemplo, puedes promediar todos los elementos de un vector utilizando la función `mean()`.

```{webr}

# Crear un vector de números
mis_numeros <- c(1, 2, 3, 4, 5)

# Calcular el promedio de los números
mean(mis_numeros)

```

## Ejercicio

Calcula la suma de los números 1, 2, 3, 4, y 5. Para esto, crea un vector con los números y utiliza la función `sum()` para calcular la suma.

```{webr}
#| exercise: ex_2_r

# Crear un vector de números y asígnalo a la variable mis_numeros
_______

# Calcular la suma de los números
_______
```



```{webr}
#| exercise: ex_2_r
#| check: true

mis_numeros <- c(1, 2, 3, 4, 5)

sum(mis_numeros)

if (isTRUE(all.equal(.result, sum(mis_numeros)))) {
  list(correct = TRUE, message = "Nice work!")
} else {
  list(correct = FALSE, message = "That's incorrect, sorry.")
}
```

---


## Conclusion

- Linear regression is a powerful tool for modeling relationships between variables.
- Both R and Python offer robust implementations and diagnostic tools.
- Always check assumptions and perform diagnostics to ensure the validity of your model.
- Consider more advanced techniques (e.g., multiple regression, polynomial regression) for complex relationships.