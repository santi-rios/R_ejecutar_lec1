---
title: "Empieza a programar con R"
subtitle: "Familiarízate con R"
author: "Cursos Orca"
format: 
    live-revealjs: 
        theme: simple
        scrollable: true
        toc: true
        toc-depth: 1
        toc-title: Contenido de la Lección
        progress: true
        slide-number: true
        lang: es
        logo: "https://cran.r-project.org/Rlogo.svg"
webr:
    packages: 
        - ggplot2
engine: knitr
---

{{< include ../_extensions/r-wasm/live/_knitr.qmd >}}

## Introducción

::: {.incremental}
- Estos ejercicios son sencillos y están diseñados para introducir a los usuarios al entorno de R de una manera práctica.
- En esta lección, aprenderás a correr código en R, asignar valores a variables y hacer operaciones con ellas.

:::

---

# Ejecutar Tu Primer Código en R

## Operaciones Aritméticas Básicas

En R, puedes realizar operaciones aritméticas básicas como suma, resta, multiplicación, división y potencia. Ejecuta el siguiente código y observa los resultados:

*Suma*:

```{webr}

# Suma
3 + 5

```

*Resta*:

```{webr}

# Resta
10 - 4

```

## Operaciones Aritméticas Básicas

*Multiplicación*:

```{webr}

# Multiplicación
7 * 6


```

*División*:

```{webr}

# División
20 / 4


```

## Operaciones Aritméticas Básicas

*Potencia*:

```{webr}
# Potencia
2^3

```

*Modulo*:

```{webr}
# Modulo
10 %% 3

```

**Nota**: el operador de modulo se utiliza para obtener el residuo de una división. Por ejemplo, 10 %% 3 es igual a 1, ya que 10 dividido entre 3 es 3 y sobra 1. 

## Ejercicio

¿Cuál será el resultado de `5 modulo 3`, o `5 %% 3`? Trata de razonarlo antes de correr el código o ver la solución. 


```{webr}
#| exercise: ex_0_r

# Modulo
5 %% 3

```


::: { .solution exercise="ex_0_r" }
::: { .callout-tip collapse="false"}
## Solución y explicación:

`5 modulo 3`, o `5 %% 3`? es igual a 2, ya que 5 dividido entre 3 es 1 y sobra 2.

:::
:::


---

## Puntos Clave - Salida o Output

- Observa cómo al ejecutar el código, se muestra el resultado de cada operación aritmética en una línea de mensaje. 
- Este es el resultado y es conocido como la salida de la operación. En los textos y tutoriales de R, se le conoce como "*output*".

##

Corre el siguiente código que tiene 2 operaciones aritméticas y observa cómo se muestran 2 salidas, una para cada operación en una línea de mensaje.

```{webr}
# Suma
3 + 5

# División
20 / 4

```

## Puntos Clave - Comentarios I {.smaller}

::: {.incremental}
- En R, el símbolo `#` se utiliza para hacer comentarios. 
- R ignora los comentarios al ejecutar el código.
- Los comentarios son útiles para explicar el código y hacerlo más legible. 
- Observa como en el siguiente código si comentamos las operaciones, no tendremos salida.
:::

```{webr}

# Suma
# 3 + 5

# División
# 20 / 4

# Potencia
# 2^3

```

## Puntos Clave - Comentarios II

- Si removemos los comentarios, el código se ejecutará y mostrará la salida.


```{webr}

# Suma
3 + 5

# División
20 / 4

# Potencia
2^3

```

##

***Observa*** como dejamos los comentarios en las líneas de código que explican la operación aritmética (`#Suma #División...`). Esto es una buena práctica para hacer el código más legible al describir lo que hace cada línea de código.

También es posible comentar una línea de código al final de la línea de código de la siguiente manera. 


```{webr}

3 + 5 # Suma

20 / 4 # División

2^3 # Potencia

```

##

::: {.callout-caution}
Si pones el comentario antes de la operación, no obtendrás la salida ya que R considerará toda la línea como un comentario. Verifica que el siguiente código no tiene salida.

```{webr}

# Suma 3 + 5 

# División 20 / 4 

# Potencia 2^3 

```

:::


## Puntos Clave - Comentarios III

::: {.callout-warning}
Si quitamos los comentarios de la línea de código que explica, obtendremos un error.
:::

Corre el siguiente código y observa el error. En otra lección veremos a detalle el tema de los errores en códigos. Por lo mientras, solo observa que se produce un error si quitamos el comentario `#` en la línea que explica.


```{webr}

Suma de 3 más cinco:
3 + 5

```

Esto se soluciona agregando el símbolo `#` al principio de la línea para convertirlo en un comentario.

```{webr}

# Suma de 3 más cinco:
3 + 5

```

# Variables

## Asignación de Variables {.smaller}

::: {.incremental}
- Una variable te permite almacenar un valor (números, palabras, datos) y hacer referencia a él en tu código. 
- Piensa en una variable como una caja donde puedes guardar un valor y luego utilizarlo.
:::

. . .

![](http://orcaasesina.com/wp-content/uploads/2024/10/variable.png)


## Asignación de Variables {.smaller}

- En R, puedes asignar valores a variables utilizando el operador `<-` o el operador `=` (menos utilizado; no se recomienda). 
- En el siguiente ejemplo, asignamos el valor `10` a la variable `x` y luego imprimimos el valor de `x`. 


```{webr}

# Asignación de variables
x <- 10

# Imprimir el valor de x
print(x)

```

## Imprimir Valores

::: {.callout-note}
A qué nos referimos con ¨imprimir¨ en R: En R, puedes *imprimir* o visualizar un valor utilizando la función `print()`. Sin embargo, en la mayoría de los casos, no es necesario utilizar `print()` para imprimir valores, como en el siguiente ejemplo. Observa que el resultado es el mismo que si utilizamos `print()`, como en la diapositiva pasada.

```{webr}

# Asignación de variables
x <- 10

# Imprimir el valor de x SIN print()
x

```

:::

## Operaciones con Variables

Puedes realizar operaciones aritméticas con variables. En  el siguiente ejemplo, asignamos valores numéricos a las variables `a` y `b`, y luego multiplicamos `a` por `b`. 

```{webr}

a <- 10 # variable a vale 10
b <- 5 # variable b vale 5

a * b # es igual a 10 * 5

```

## Operaciones con Variables II

::: {.incremental}
- En el siguiente ejemplo, asignamos valores NO numéricos a las variables `a` y `b`, y luego multiplicamos `a` por `b`.
- Esto nos dará un error, ya que no se pueden multiplicar valores no numéricos. Esto se expande en la lección sobre los tipos de datos en R más adelante en el curso.
:::

```{webr}

a <- "diez" # variable a vale 10
b <- "cinco" # variable b vale 5

a * b 

```

## Variables - Cómo nombrarlas

::: {.incremental}
- En R, las variables pueden tener nombres descriptivos y significativos.
- Los nombres de las variables pueden contener letras, números y guiones bajos, pero no pueden comenzar con un número.
- Los nombres de las variables no pueden contener espacios, pero puedes usar guiones bajos (`nombre_variable`) o puntos (`nombre.variable`) para separar palabras.
- Es una buena práctica utilizar nombres de variables descriptivos y significativos para hacer tu código más legible.
- No usar nombre que puedan tener conflicto o que ya estén reservados para funciones de R, como `c`, `mean`, `sum`, `data`, entre otros.

:::


# Ejericio Práctico - Operaciones y Variables

## Ejericio

**Instrucciones**. 1.- Realiza la operación que se pide a continuación. 2.- Asigna el resultado a una variable llamada `operaciones` 3.- Imprime el resultado con la función `print()`.

*Nota*: Sustituye los guiones bajos (`_______`) por el código correspondiente. Si estás atorado, puedes ver pistas o la solución haciendo click en el botón de ayuda. 

```{webr}
#| exercise: ex_1_r

# Suma 4 más 7 y divide el resultado entre 2 y asígnalo a la variable.
# NOTA: Utiliza el paréntesis para indicar el orden de las operaciones.
_______

# imprimir el resultado con print(nombre_variable)
______
```


```{webr}
#| exercise: ex_1_r
#| check: true

operaciones <- (4 + 7)/2

print(operaciones)

if (isTRUE(all.equal(.result, print(operaciones)))) {
  list(correct = TRUE, message = "Correcto!")
} else {
  list(correct = FALSE, message = "Incorrecto.")
}
```


::: { .hint exercise="ex_1_r"}
::: { .callout-note collapse="false"}

## Pista 1

El órden de las operaciones es importante. Utiliza paréntesis para indicar el orden de las operaciones.

```r
(____ + ____)/____
```
:::
:::

::: { .hint exercise="ex_1_r"}
::: { .callout-note collapse="false"}

## Pista 2

Asigna el resultado a la variable que se te indica y acuérdate de imprimir el resultado.	

```r
nombre_variable <- (____ + ____)/____

print(nombre_variable)
```
:::
:::

::: { .solution exercise="ex_1_r" }
::: { .callout-tip collapse="false"}

## Solución


```r
operaciones <- (4 + 7)/2

print(operaciones)
```


:::
:::


## 


::: {.callout-note}
A diferencia de la analogía de la variable como una caja, cuando usamos ("abrimos") una variable, esta variable mantendrá su valor almacenado en la memoria de R. Observa como si volvemos a imprimir el valor de la variable `x` que guardamos unas diapositivas atrás, este seguirá siendo `10`.
:::

```{webr}
#| include: false

x <- 10

```

```{webr}

# Imprimir el valor almacenado previamente
x

```

## 

::: {.callout-note}
Si asignas un nuevo valor a una variable existente, el valor anterior se perderá. A veces, esto puede ser útil, pero en general, es una buena práctica utilizar nombres de variables únicos y descriptivos para evitar confusiones. Observa como si asignamos un nuevo valor a la variable `x`, el valor anterior se pierde.
:::

```{webr}

# nuevo valor para la variable x
x <- 20

# Imprimir el valor
x

```

# Vectores

## Vectores - Introducción

::: {.incremental}
- En R, un vector es una estructura que almacena una secuencia de valores.
- En R (a diferencia de los vectores en matemáticas), los vectores pueden contener diferentes tipos de datos, como números, texto, o valores lógicos. Por el momento, nos enfocaremos en vectores numéricos. 
- Puedes crear un vector utilizando la función `c()` (que significa "concatenar"). 
:::

. . .

Ejecuta el siguiente código para crear un vector de números. Solo ejecuta el código, no hay salida (ver siguiente diapositiva).

```{webr}

# Crear un vector de números
mis_numeros <- c(1, 2, 3, 4, 5)

```

##

::: {.callout-important}
Observa cómo al correr el código, no tenemos salida. Esto es porque solo hemos creado el vector, pero no hemos hecho nada con él. Es decir, R almacenó el vector en la variable `mis_numeros` en su memoria, pero no mostrará nada hasta que le pidamos que haga algo con él. Si ya corriste el código de arriba, podemos imprimir el vector `mis_numeros` para ver su contenido. Ten en cuenta que si no has corrido el código, o reinicias la página o RStudio, no podrás imprimir el vector ya que no existe en la memoria de R. 

```{webr}
# Imprimir el vector
print(mis_numeros)

```

:::

## Vectores - Introducción II

Solo como ejemplo, ejecuta el siguiente código para crear un vector con datos no numéricos. Puedes experimentar y seguir agregando más elementos al vector. Si quieres agregar palabras, recuerda ponerlas entre comillas dobles `""`. SI quieres poner valores numéricos, solamente ponlos sin comillas `12`. Separar los elementos con comas `,`. Al final, imprime el vector para ver su contenido.


```{webr}

# Crear un vector de nombre de frutas
frutas <- c("manzana", "naranja", "plátano", "uva")

# imprimir el vector
print(frutas)

```


## Vectores - Operaciones


Podemos utilizar vectores para realizar operaciones en todos los elementos del vector. Por ejemplo, puedes promediar todos los elementos de un vector utilizando la función `mean()`.

```{webr}

# Crear un vector de números
mis_numeros_media <- c(1, 2, 3, 4, 5)

# Calcular el promedio de los números
# No utilizamos print() ya que la función mean() ya imprime el resultado
mean(mis_numeros_media)

```

En otro módulo del curso veremos más funciones y operaciones que puedes realizar con vectores en R.

# Ejercicio Práctico 2 - Vectores

## Ejercicio {.smaller}

**Instrucciones**. Crea un vector llamado `mis_numeros_ejercicio` con los valores `1, 2, 3, 4, y 5`.  Calcula la suma de los números en este vector con la función `sum()`. 

Básate en el ejercicio anterior, sólo remplaza la función de la media con la función de la suma.


```{webr}
#| exercise: ex_2_r

# Crear un vector de números y asígnalo a la variable mis_numeros
_______

# Calcular la suma de los números
_______
```



```{webr}
#| exercise: ex_2_r
#| check: true

mis_numeros_ejercicio <- c(1, 2, 3, 4, 5)

sum(mis_numeros_ejercicio)

if (isTRUE(all.equal(.result, sum(mis_numeros_ejercicio)))) {
  list(correct = TRUE, message = "Nice work!")
} else {
  list(correct = FALSE, message = "That's incorrect, sorry.")
}
```


::: { .solution exercise="ex_2_r" }
::: { .callout-tip collapse="false"}

## Solución

```r
mis_numeros_ejercicio <- c(1, 2, 3, 4, 5)

sum(mis_numeros_ejercicio)
```

:::
:::

---





# Resumen

## Resumen de la Lección {.smaller}

- En esta lección, aprendiste a correr código en R, asignar valores a variables y hacer operaciones con ellas.
- También aprendiste sobre errores comunes en R y cómo solucionarlos.
- Esta es una primera introducción a R que servirá como base para las lecciones siguientes.
- En lo que resta del curso, aprenderás a trabajar con datos en R y a manipularlos para análisis y visualización, tal como en la lección de muestra al inicio.


# Fin

