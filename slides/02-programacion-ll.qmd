---
title: "Programación Funcional en R"
subtitle: "Introducción a la Programación"
author:
  - name: "Mtro. Santiago Ríos"
    email: santiagoboo99@gmail.com
    affiliation: 
      - name: Cursos Orca
        city: CDMX
        url: orcaasesina.com
format: 
    live-revealjs: 
        theme: serif
        scrollable: true
        progress: true
        slide-number: true
        incremental: true
        lang: es
        logo: "https://cran.r-project.org/Rlogo.svg"
webr:
    packages: 
        - dplyr
        - purrr
# pyodide: 
#     packages: 
#         - scikit-learn
#         - pandas
#         - matplotlib
#         - seaborn
#         - statsmodels
engine: knitr
---

{{< include ../_extensions/r-wasm/live/_knitr.qmd >}}

## Introducción

- Si ya entendiste los conceptos básicos de programación, es hora de explorar la programación funcional en R.
- A diferencia de los ejercicios que realizamos en las lecciones pasadas, veras que en R tenemos librerías que facilitan la programación funcional y la manipulación de datos.
- Generalmente no necesitas escribir bucles `for` o `while` en R (en especial cuando comienzas), ya que puedes usar funciones y paquetes especializados para realizar tareas de manera más eficiente y efectiva.


## Ejemplos de Programación Funcional en R

- A continuación, veremos algunos ejemplos de programación funcional en R utilizando los paquetes `dplyr` y `purrr` (parte del `tidyverse`).
- Veremos cómo realizar tareas comunes de análisis de datos, como contar valores únicos, crear nuevas variables y aplicar funciones a múltiples columnas de un data frame.
- Como verás, en lugar de usar bucles, usaremos funciones que se encargan de realizar estas tareas de manera más efectiva y eficiente.

## Contar valores únicos

- Una tarea común en análisis de datos es contar los valores únicos en un vector o columna de un data frame.
- Una forma de hacerlo es usar un bucle `for` para recorrer los valores y contar las ocurrencias de cada uno.
- En lugar de usar bucles, podemos usar la función `count()` de `dplyr` para contar los valores únicos en un vector.
- Compararemos ambos enfoques para contar las especies de personajes en el dataset `starwars` (se carga con la librería dplyr o tidyverse).

##

El conjunto de datos starwars viene incorporado en el paquete dplyr y corresponde a un conjunto de datos (un tibble) con 87 filas y 14 variables:

    name: Nombre del personaje
    height: Altura (cm)
    mass: Peso (kg)
    hair_color,skin_color,eye_color: Color de cabello, piel y ojos
    birth_year: Año de nacimiento (ABY = Antes de la Batalla de Yavin)
    sex: El sexo biológico del personaje, es decir, masculino, femenino, hermafrodita o ninguno (como en el caso de los droides).
    gender: El rol de género o la identidad de género del personaje según lo determinado por su personalidad o la forma en que fueron programados (como en el caso de los droides).
    homeworld: Nombre del mundo natal
    species: Nombre de la especie
    films: Lista de películas en las que apareció el personaje
    vehicles: Lista de vehículos que ha pilotado el personaje
    starships: Lista de naves estelares que el personaje ha pilotado


##

::: {.panel-tabset}

## Usando bucles

```{webr}	
# Cargar el dataset starwars
data(starwars, package = "dplyr")

# Crear un vector con las especies
species_vector <- starwars$species

# Inicializar una lista para almacenar los conteos
species_count <- list()

# Bucle para contar las especies
for (species in unique(species_vector)) {
  # Contar el número de apariciones de cada especie
  count <- sum(species_vector == species, na.rm = TRUE)
  # Almacenar el resultado en la lista
  species_count[[species]] <- count
}

# Convertir la lista a un data.frame o vector
species_names <- names(species_count)
n_count <- unlist(species_count)

# ver reusltados
print(species_names)
print(n_count)


```

## Usando dplyr

```{webr}	
library(dplyr)

starwars %>% count(species)

```

:::

##

- Como observamos, el enfoque de `dplyr` es más conciso y legible que el uso de bucles `for`.
- Como verás, en `dplyr` podemos agregar argumentos adicionales para manipular los datos de manera más efectiva.
- Por ejemplo, podemos agregar el argumento `sort = TRUE` para ordenar los resultados por frecuencia.

```{webr}
starwars %>% count(species, sort = TRUE)

```

##

- También podemos evaluar más de una variable a la vez, por ejemplo, para contar los valores únicos de dos variables, `species` y `gender`, podemos hacer lo siguiente:

```{webr}	

starwars %>% count(species, gender, sort = TRUE)

```

## group_by() 

- El código de la diapositiva pasada se puede escribir con la función `group_by()` de `dplyr`.
- Como su nombre lo indica, esta función agrupa los datos por una o varias variables.
- En el siguiente código, agrupamos los datos por la variable `species` y luego contamos los valores únicos de la variable `gender`.
- Recuerda que el operador `%>%` se utiliza para encadenar operaciones en `dplyr`.

```{webr}
starwars %>%
  group_by(species) %>%
  count(sex, sort = TRUE)

```

## 

- La función `group_by()` es muy util para realizar distintas operaciones en grupos de datos.
- Esto lo veremos a lo largo del curso, ya que es una de las funciones más utilizadas en `dplyr` para manipular y resumir datos.
- Por ahora, observa cómo podemos agrupar los datos por más de una variable y realizar operaciones en cada grupo. En el siguiente código, vamos a agrupar los datos por especie y planeta de origen (`group_by(species, homeworld)`), y luego contar los valores únicos de la variable `gender`.
- Puedes experimentar con distintas combinaciones de variables, utiliza `colnames(starwars)` para ver las columnas (variables) disponibles en el dataset.

```{webr}

starwars %>%
  group_by(species, homeworld) %>%
  count(gender, sort = TRUE)

```

## Crear nuevas variables
- Otra tarea común en análisis de datos es crear nuevas variables a partir de las existentes.
- Esto se puede hacer de forma sencilla con la función `mutate()` de `dplyr` en lugar de escribir bucles `for` o `while`.
- Como verás, la sintaxis de `mutate()` es muy similar a la de group_by() y count() ya que dplyr sigue una gramática de datos coherente y similar en todas sus funciones.
- Veamos un ejemplo sencillo: vamos a crear una nueva variable `height_m` que convierta la altura de los personajes de centímetros a metros.

##

- Para esto, usamos `mutate(nombre_nueva_variable = nombre_variable_altura / 100)` para crear una nueva columna `altura_m` que sea igual a la columna `height` dividida por 100. Observa que después utilizamos la función `select()` para seleccionar solo las columnas `name`, `height` y `altura_m` para hacer más legible la salida.

```{webr}

starwars %>%
  # crear una nueva variable altura_m que convierta la altura de cm a m
  mutate(altura_m = height / 100) %>%
  select(name, height, altura_m)

```

## Evaluar condiciones lógicas

- `mutate()` tamibién facilita la creación de variables basadas en condiciones lógicas sin necesidad de escribir bucles y condicionales complejos.
- Por ejemplo, vamos a crear una nueva variable (`humano`) que indique si un personaje es humano o no.
- Antes de ver el ejemplo, observa los operadores lógicos más comunes en R. Estos operadores se utilizan para evaluar condiciones lógicas y devolver un valor verdadero o falso:
    - `==` igual a, por ejemplo `if(X == Y)`
    - `!=` diferente de, por ejemplo `if(X != Y)`
    - `>` mayor que
    - `<` menor que
    - `>=` mayor o igual que
    - `<=` menor o igual que
    - `&&` y
    - `||` o
    - `!` no


##

- Observa la sintaxis ahora: usamos `mutate(nueva_variable = ifelse(condición, valor_si_verdadero, valor_si_falso))` para crear la nueva variable `humano` que será "Si" si la especie es "Human" y "No" en caso contrario. En este caso, la condición es `species == "Human"` que evalúa si la variable `species` es igual a "Human". Si la condición es verdadera, la nueva variable `humano` será "Si", de lo contrario será "No". Al final, seleccionamos solo las columnas `name`, `species` y `humano` para mostrar el resultado.


::: {.panel-tabset}

## dplyr

```{webr}

starwars %>%
  mutate(humano = ifelse(species == "Human", "Si", "No")) %>%
  select(name, species, humano)

```

## con bucles

```r

# Cargar el dataset starwars
data(starwars, package = "dplyr")

# Inicializar un vector para la nueva columna humano
humano <- character(nrow(starwars))

# Bucle para asignar "Si" o "No" a cada fila según la especie
for (i in seq_along(starwars$species)) {
  if (starwars$species[i] == "Human") {
    humano[i] <- "Si"
  } else {
    humano[i] <- "No"
  }
}

...

```

:::

## 

- Otra forma de realizar esta tarea es utilizando la función `case_when()` de `dplyr`. 
- La función `case_when()` de `dplyr` es útil para realizar múltiples comparaciones y asignaciones en un data frame.
- La función `case_when()` es similar a una serie de declaraciones `ifelse()` anidadas, pero más legible y fácil de usar.
- Por ejemplo, podemos crear una nueva variable que indique si un personaje es alto, mediano o pequeño en función de su altura.

##

Piénsalo como una serie de declaraciones `ifelse()` anidadas: si la altura es mayor a 180 cm, asignar "alto"; si la altura es mayor a 160 cm, asignar "mediano"; de lo contrario, asignar "pequeño".

```{webr}

starwars %>%
  mutate(tamano = case_when(
    height > 180 ~ "alto", # Si la altura es mayor a 180 cm, asignar "alto"
    height > 150 ~ "mediano", # Si la altura es mayor a 160 cm, asignar "mediano"
    TRUE ~ "pequeño" # De lo contrario, asignar "pequeño"
  )) %>%
  select(name, height, tamano)

```

## Seleccionar columnas y filtrar observaciones
- Otra tarea común en análisis de datos es seleccionar columnas específicas y filtrar observaciones basadas en ciertas condiciones.
- En lugar de usar bucles y condicionales, podemos usar las funciones `select()` y `filter()` de `dplyr` para realizar estas tareas de manera más efectiva y eficiente.
- Como ya vimos un poco, la función `select()` nos permite seleccionar columnas específicas de un data frame y tiene la sintaxis `select(columna1, columna2, columna3, ...)`.
- Por otro lado, la función `filter()` nos permite filtrar observaciones basadas en condiciones lógicas y tiene la sintaxis `filter(condición)`.

##

En el siguiente ejemplo, seleccionamos solo las columnas `name` y `species` y filtramos las observaciones para mostrar solo los personajes que son humanos `(species == "Human")`.

```{webr}

starwars %>%
  select(name, species) %>%
  filter(species == "Human")

```

## NOTA

Recuerda que todas las operaciones que hemos realizado las puedes almacenar en una variable para poder utilizarlas posteriormente. Por ejemplo, si deseas guardar el resultado de la selección y filtrado de las columnas `name` y `species` de los personajes humanos en una variable llamada `humanos`, puedes hacerlo de la siguiente manera:

```{webr}

humanos <- starwars %>%
  select(name, species) %>%
  filter(species == "Human")

head(humanos) # Mostrar las primeras filas de la variable humanos

```

##

Otro ejemplo: filtrar basado en múltiples condiciones lógicas. En este caso, seleccionamos solo las columnas `name`, `species` y `height` y filtramos las observaciones para mostrar solo los personajes que son humanos (`species == "Human"`) y miden más de 180 cm (`height > 180`).

```{webr}

starwars %>%
  select(name, species, height) %>%
  filter(species == "Human" & height > 180) # & es el operador lógico "y" y evalúa que ambas condiciones sean verdaderas

```

## 

- Para usar select() en patrones más complejos, podemos especificar las columnas que queremos seleccionar por nombre o utilizando funciones como `starts_with()` (seleccionar columnas que comienzen con alguna letra/palabra), `ends_with()` (seleccionar columnas que terminen con alguna letra/palabra), `contains()` seleccionar columnas que contengan con alguna letra/palabra, `num_range()` (seleccionar columnas que contengan un rango de números), `everything()` (seleccionar todas las columnas), entre otras.
- Estos casos se verán más adelante en el curso, pero es importante que sepas que existen estas funciones para facilitar la selección de columnas en un data frame.


## summarize()

- La función `summarize()` de `dplyr` nos permite resumir datos y obtener estadísticas descriptivas (**siguiente lección**) de un data frame.
- vamos a ver un ejemplo sencillo: vamos a calcular la media de la altura de los personajes humanos en el dataset `starwars`.

##

la sintaxis de `summarize()` es `summarize(nueva_variable = función(variable_a_manipular, argumentos))`, donde `nueva_variable` es el nombre de la nueva variable que queremos crear y `función(variable_a_manipular, argumentos)` es la función que queremos aplicar a la variable. En este caso, la función es `mean()` para calcular la media de la altura de los personajes humanos (recuerda que el argumento `na.rm = TRUE` se utiliza para ignorar los valores faltantes y que no cause error al calcular la media).

```{webr}

starwars %>%
  filter(species == "Human") %>% # Filtrar solo los personajes humanos
  summarize(media_altura = mean(height, na.rm = TRUE)) # Calcular la media de la altura

```

## Ejercicio

- Calcula la media de la altura de los personajes humanos agrupados por planeta de origen (`homeworld`).

```{webr}
#| exercise: ex_programacion_funcional_1

starwars %>%
  ______ %>%
  filter(species == "Human") %>% 
  summarize(media_altura = mean(height, na.rm = TRUE)) 

```

::: { .solution exercise="ex_programacion_funcional_1" }
::: { .callout-tip collapse="false"}
## Solución

```r
starwars %>%
  group_by(homeworld) %>%
  filter(species == "Human") %>% 
  summarize(media_altura = mean(height, na.rm = TRUE)) 
```

:::
:::

## 

::: {.callout-note}

A veces necesitamos extraer solamente los valores que hemos calculado en lugar de un data frame completo. Para esto, podemos usar la función `pull()` de `dplyr` para extraer una columna de un data frame como un vector. Por ejemplo, si queremos extraer la media de la altura de los personajes humanos, podemos hacer lo siguiente:

```{webr}
starwars %>%
  filter(species == "Human") %>% 
  summarize(media_altura = mean(height, na.rm = TRUE)) %>%
  pull(media_altura)
```

Esta función de pull() es muy útil cuando necesitamos extraer valores específicos de un data frame, incluso si no son numéricos:

```{webr}

starwars %>%
  select(name) %>% # seleccionar solo la columna name
  pull() # extraer la columna como un vector

```

:::

## across()

- La función `across()` de `dplyr` nos permite aplicar una función a múltiples columnas de un data frame.
- En este caso, usamos la función `across()` para seleccionar 2 variables numéricas y aplicar la función `mean()` a cada una de ellas. El resultado es que obtenemos la media de las variables `mass` y `height` de los personajes en el dataset `starwars`. Puedes practicar agrupando por alguna otra variable o aplicando otras funciones vistas antes.
- Por el momento ignora la advertencia que aparece al correr el código.

```{webr}

starwars %>%
  summarise(across(c(mass, height), mean, na.rm = TRUE))

```


##

::: {.callout-tip}
Una forma de aplicar la función pasada a TODAS las columnas numéricas de un data frame es utilizando la función `summarise_if()` de `dplyr`. Esta función nos permite aplicar una función a las columnas que cumplan con ciertas condiciones lógicas. Por ejemplo, si queremos calcular la media de todas las columnas numéricas del dataset `starwars`, podemos hacer lo siguiente:

```{webr}

starwars %>%
  summarise_if(is.numeric, mean, na.rm = TRUE)

```
:::







# Extra - Programación Funcional con purrr

![](https://purrr.tidyverse.org/logo.png)


## purrr

- Un paquete muy popular para la programación funcional en R es `purrr`, que ofrece un conjunto de herramientas para trabajar con funciones de manera más efectiva.
- `purrr` proporciona una serie de funciones que facilitan la aplicación de funciones a múltiples elementos de una lista o vector, evitando el uso de bucles `for` y `while`.
- Primero, carga el paquete `purrr` para comenzar a explorar la programación funcional en R. recuerda que es parte del `tidyverse`, por lo que si ya has instalado el tidyverse, no necesitas instalarlo nuevamente.

```{webr}
# Cargar el paquete purrr
library(purrr)

```

##

- Ahora, vamos a crear una función simple que calcule el cuadrado de un número. Luego, usaremos la función `map()` de `purrr` para aplicar esta función a cada elemento de una lista de números.
- La función `map()` remplaza el uso de bucles `for` y `while` en la programación funcional, lo que facilita la aplicación de funciones a múltiples elementos de una lista o vector.


```{webr}

# Función simple pura: cuadrado de un número
cuadrado <- function(x) {
  return(x * x)
}

# Programación funcional usando map de purrr
# Aplicar una función a cada elemento de una lista o vector
numeros <- list(1, 2, 3, 4, 5)
numeros_cuadrados <- map(numeros, cuadrado)
print(numeros_cuadrados)

```

## Ejercicio:

- Crea una función pura que convierta la temperatura de Celsius a Fahrenheit y aplícala a un vector de temperaturas.
- La función para convertir de Celsius a Fahrenheit es: `F = (C * 9/5) + 32`.
- `map_dbl()` es una versión de `map()` que devuelve un vector numérico en lugar de una lista.

```{webr}
#| exercise: ex_02_purr

celsius_a_fahrenheit <- function(temp_c) {
  return(______)
}

# Aplicar la función al vector de temperaturas
temperaturas_celsius <- c(0, 100, 37)
temperaturas_fahrenheit <- map_dbl(temperaturas_celsius, ______)
print(temperaturas_fahrenheit)


```


::: { .solution exercise="ex_02_purr" }
::: { .callout-tip collapse="false"}
## Solución
```r

celsius_a_fahrenheit <- function(temp_c) {
  return((temp_c * 9/5) + 32)
}

# Aplicar la función al vector de temperaturas
temperaturas_celsius <- c(0, 100, 37)
temperaturas_fahrenheit <- map_dbl(temperaturas_celsius, celsius_a_fahrenheit)
print(temperaturas_fahrenheit)


```
:::
:::




# Fin