---
title: Conceptos básicos de programación
subtitle: Aprende a programar con Karel
format: html
embed-resources: true
navbar: false
execute: 
  eval: false
---

## Conceptos básicos de programación

- Qué es la programación: es la actividad por la cual las personas entregan a una computadora un conjunto de instrucciones que, al ejecutarlas, permite a la computadora resolver un problema. 
- Los conjuntos de instrucciones que las computadoras reciben se denominan programas.
- En programación, muchas veces se pueden seguir diferentes rutas para completar una tarea, y el programador debe imaginar cuáles son y elegir una. 
- Algunos de estos caminos pueden ser más eficientes que otros.
- Para darle instrucciones a una computadora, necesitamos utilizar un lenguaje de programación.
- En esta lección, aprenderemos conceptos básicos de programación para desarrollar el pensamiento abstracto y lógico necesario para comunicarnos eficientemente con la computadora. 
- El lenguaje de programación que usaremos es R.
- Para comprender algunas ideas básicas de programación, utilizaremos a Karel, un robot que se mueve por mundos rectangulares. 
- En esta primera lección, el objetivo no es aprender R, sino comprender conceptos básicos de programación y cómo se aplican en R.
- Las dos habilidades que deberás desarrollar son: 
    - Diseñar algoritmos: desarrollar o elegir un algoritmo que resuelva un problema.
    - Codificación: escribir el algoritmo en un lenguaje de programación para que la computadora pueda entenderlo y ejecutarlo.


## Qué es Karel

- Karel es un robot que vive en un mundo de cuadrículas diseñado para enseñar conceptos básicos de programación.
- Karel recibe instrucciones en español para moverse por el mundo y realizar tareas específicas.
- Gracias a que observarás cómo Karel se mueve y realiza tareas, podrás comprender mejor los conceptos de programación, así como los errores que pueden surgir al programar.
- Los errores de programación se llaman *bugs*, palabra que viene de un error en una computadora en 1947 debido a una polilla. 
- Le daremos a Karel instrucciones para que resuelva un problema (algoritmo). Cada instrucción del algoritmo modifica el mundo (*entorno*) de alguna manera y se denomina acción.

## Instalar Karel en R

Primero, necesitas instalar y cargar el paquete `karel` en R. Para hacerlo, ejecuta el siguiente código. Un paquete se instala una sola vez, pero cada vez que lo queramos usar debemos cargarlo para que las herramientas que trae queden a nuestra disposición.

::: {.callout-tip}
Cuando veas un bloque de código como el que sigue, puedes copiarlo y pegarlo en la consola de R para ejecutarlo. Si acercas el cursor al bloque, verás un botón para copiar el código en la parte superior derecha.
:::

```{r}
install.packages("karel")

library(karel)
```

Si no puedes instalarlo con este código, intenta con el código alternativo que se muestra a continuación. Si ya pudiste instalarlo, puedes saltar al siguiente paso.

Primero tienes que instalar devtools, que es un paquete que te permite instalar paquetes directamente desde GitHub. Después, instala el paquete `karel` desde GitHub. 

```{r}
install.packages("devtools")
devtools::install_github("mpru/karel")
library(karel)
```


## Generar un mundo
- Si ya cargaste el paquete `karel`, estás listo para comenzar a programar a Karel.
- El primer paso es crear un mundo para Karel.
- Esto se hace con la función `generar_mundo()`.
- Dentro de los paréntesis, debes especificar el nombre del mundo que deseas crear.
- El paquete Karel viene con varios mundos predefinidos que puedes usar. Por ejemplo, `mundo001`.
- Corre el siguiente código para generar el mundo llamado `mundo001`.

```{r}
generar_mundo("mundo001")
```

- Una vez que hayas ejecutado el código, verás una ventana emergente con el mundo de Karel.
- Observa que el mundo está formado por cuadrículas y Karel se encuentra en una posición específica.
- Las calles son las fila del mundo rectangular, es decir, las calles corren horizontalmente.
- Las avenidas corren verticalmente (columnas). 
- La intersección entre una calle y una avenida es llamada celda y se puede identificar por los números fuera del recuadro.
- Karel siempre mira hacia una de las cuatro direcciones posibles: este, norte, oeste o sur.
- Los bordes negros representan paredes que Karel no puede cruzar.
- El cubo morado se llama en el programa un `coso`. Estos `cosos` pueden ser tomados por Karel y guardarlos en su mochila. En el mundo que acabamos de crear, el coso se encuentra en la celda (2, 1)

## Acciones de Karel

- Karel puede realizar las siguientes acciones: 
- `avanzar()`, se mueve un paso hacia la celda que tiene adelante, si no hay una pared que se lo impida.
- `girar_izquierda()`, rota 90 grados hacia su izquierda (sentido contrarreloj).
- `juntar_coso()`, levanta el coso que hay en su celda y lo guarda en su mochila. Debe haber al menos un coso en la celda para que Karel pueda realizar esta acción.
- `poner_coso()`, toma un coso de su mochila y lo coloca en la celda. Debe haber al menos un coso en la mochila de Karel para que pueda realizar esta acción.
- `ejecutar_acciones()`, después de decirle a Karel que queremos que haga, esta función le dice a Karel que ejecute las instrucciones.

Como vimos previamente, una función en R se escribe igual que las acciones de Karel. Piensa en la función `print()`. Recuerda que las funciones reciben argumentos dentro de los paréntesis, como `print("Hola, mundo!")`.

Veamos un primer ejemplo. Vamos a pedirle a Karel que avance, junte el coso y vuelva a avanzar:

```{r}
dev.off()
generar_mundo("mundo001")
avanzar()
juntar_coso()
avanzar()
ejecutar_acciones()

```

![](https://ropensci.github.io/karel/articles/14.gif)

## Ejercicio 2

- Karel junte el coso, lo coloque en la Calle 2 y Avenida 5 y finalmente avance a la Calle 2 y Avenida 6

![](https://ropensci.github.io/karel/articles/15.png)

- Los primeros tres comandos que necesitamos en el programa son los mismos de antes, pero luego Karel tiene que girar a su izquierda para poder bordear la pared y avanzar un lugar, quedando de cara al norte:

![](https://ropensci.github.io/karel/articles/16.png)

- Ahora necesitamos que Karel gire a la derecha, para que quede mirando al este.
- Sin embargo, Karel sólo sabe girar a la izquierda, no existe ninguna función girar_derecha()
- se puede lograr el mismo efecto girando tres veces a la izquierda. Luego, sólo resta que avance, coloque el coso y vuelva a avanzar una vez

```{r}

> generar_mundo("mundo001")
> avanzar()
> juntar_coso()
> avanzar()
> girar_izquierda()
> avanzar()
> girar_izquierda()
> girar_izquierda()
> girar_izquierda()
> avanzar()
> avanzar()
> poner_coso()
> avanzar()
> ejecutar_acciones()

```

![](https://ropensci.github.io/karel/articles/18.gif)

# Descomponer un problema en pasos

- Los algoritmos pueden dividirse en subalgoritmos que abordan partes más pequeñas del problema, lo que se conoce como descomposición algorítmica o modular. 
- Un subalgoritmo se escribe una vez y es reutilizado por cualquier algoritmo que lo necesite.
- Los subalgoritmos son útiles en los siguientes casos:
    - Algoritmos complejos: Escribir un algoritmo complejo como un único bloque de código lo hace difícil de entender. Separar las partes en subalgoritmos independientes reduce la complejidad.
    - Operaciones repetidas: Si un problema implica tareas que se repiten varias veces, esas tareas pueden definirse como un subalgoritmo separado, escrito una vez pero usado en múltiples lugares.
- En programación, existen varios términos para diferentes tipos de subalgoritmos, como subrutinas, funciones, procedimientos, métodos y subprogramas. En este tutorial, al usar R, nos referiremos a los subalgoritmos como funciones. 
- Muchas de las funciones que usamos en R son funciones predefinidas, como `print()`, `mean()`, `sum()`, etc.
- Sin embargo, también podemos crear nuestras propias funciones para resolver problemas específicos.

## Función Girar Derecha

- En la sección anterior Karel necesitaba doblar a la derecha y lo logramos indicándole que gire tres veces a la izquierda.
- Vamos a crear una función que nos permita girar a la derecha.
- En R, las funciones se crean con la palabra clave `function`. Observa el siguiente código que indica la estructura básica de una función en R:

```r
nombre_funcion_nueva <- function() {
    # Código de la función
}
```
- Ahora, para crear la función `girar_derecha()`, necesitamos que Karel gire tres veces a la izquierda.
- Vamos a crearla:

```{r}
girar_derecha <- function() {
  girar_izquierda()
  girar_izquierda()
  girar_izquierda()
}
```

- Observa que usamos el operador de asignación `<-` para asociar a ese nombre la definición de una función, similar a como lo hacemos con las variables.
- Nota que tienes que ejecutar el código para que la función `girar_derecha()` esté disponible en tu sesión de R.
- Ahora, vamos a usar la función `girar_derecha()` en el programa de Karel para que pueda girar a la derecha.

```{r}
generar_mundo("mundo001")
avanzar()
juntar_coso()
avanzar()
girar_izquierda()
avanzar()
# Ahora Karel puede girar a la derecha
girar_derecha()
avanzar()
avanzar()
poner_coso()
avanzar()
ejecutar_acciones()
```

![](https://ropensci.github.io/karel/articles/18.gif)

## Función Dar Vuelta	

- Ahora vamos a crear una función que nos permita dar vuelta a Karel 180 grados que permita a Karel mirar hacia la dirección contraria.
- Para esto, vamos a crear la función `dar_vuelta()` que consiste en dos giros a la izquierda.
- Intenta crear la función `dar_vuelta()` en R.
- Si tienes problemas, puedes ver la solución a continuación.

::: {.callout}
```{r}
#| code-fold: true
#| code-summary: "Mostrar Respuesta"
dar_vuelta <- function() {
  girar_izquierda()
  girar_izquierda()
}
```
:::

- Ahora, vamos a usar la función `dar_vuelta()` en el programa de Karel para que pueda girar 180 grados. 
- Si tienes problemas, puedes ver la solución a continuación.

::: {.callout collapse="true"}
```{r}
#| code-fold: true
#| code-summary: "Mostrar Respuesta"
generar_mundo("mundo001")
avanzar()
juntar_coso()
avanzar()
girar_izquierda()
avanzar()
girar_derecha()
avanzar()
avanzar()
poner_coso()
avanzar()
# Ahora Karel puede dar vuelta
dar_vuelta()
avanzar()
ejecutar_acciones()
```
:::

## Funciones integradas

- La mayoría de las veces, los paquetes de R vienen con funciones predefinidas que puedes usar para realizar tareas específicas.
- El paquete de Karel tiene algunas funciones extra que podemos utilizar sin necesidad de crear nuestras funciones propias.
- Para esto, tenemos que cargar la función `cargar_super_karel()` para que Karel pueda usar estas funciones.
- Observa que esto es similar a lo que hacemos con los paquetes de R, como `library()`.

```{r}
library(karel)
cargar_super_karel()
```

- Con esto, podemos usar `girar_derecha()` y `darse_vuelta()` sin necesidad de crear nuestras propias funciones.

## Estrucutras de control
- Frecuentemente, cuando ejecutamos un programa, queremos que ciertas partes del código se ejecuten solo si se cumple una condición específica, o queremos que se repitan ciertas partes del código varias veces.
- Esto se logra con estructuras de control, que son el conjunto de reglas que permiten controlar el flujo de las acciones de un algoritmo o programa.
- Se dividen en secuenciales, condicionales e iterativas.

### Estructuras de control secuenciales

- Estas estructuras están compuestas por un número definido de acciones que se ubican en un orden específico y se suceden una tras otra.
- Los ejemplos anteriores están conformados por este tipo de estructura.

### Estrucutras de control condicionales

- Para resolver problemas, podemos necesitar que ciertas partes del código se ejecuten solo si se cumple una condición específica.
- Podemos pedirle al código que este se ejecute solo si una condición es verdadera (`TRUE`) o falsa (`FALSE`).

#### if

- La estructura `if` es la más básica de las estructuras condicionales.
- Se usa para ejecutar un bloque de código si una condición es verdadera.
- La sintaxis básica de un `if` en R es la siguiente:

```r
if (condición) {
  # Código que se ejecuta si la condición es TRUE
}
```

- Si la condición es verdadera, el código dentro de las llaves `{}` se ejecutará.
- Karel tiene las siguientes evaluaciones que podemos usar en un `if`:
    - `frente_libre()`: Evalúa que no exista una pared frente a Karel.
    - `izquierda_libre()`: Evalúa que no exista una pared a la izquierda de Karel.
    - `hay_cosos()` : hay cosos donde se encuentra Karel
    - `karel_tiene_cosos()`: Evalúa si Karel tiene al menos un coso en su mochila.
    - `mira_este()`: Evalúa si Karel está mirando hacia el este.


Un ejemmplode uso de `if` en R es el siguiente:

Si queremos que se muestre un mensaje en la pantalla si la variable x es mayor que 5, podemos hacer lo siguiente:

```r
x <- 10
if (x > 5) {
  print("x es mayor que 5")
}
```

#### if else

- A veces, queremos que se ejecute un bloque de código si una condición es verdadera y otro bloque si es falsa.
- Para esto, usamos la estructura `if else`, que significa "si no es verdadero, entonces realiza esto".
- la sintaxis básica de un `if else` en R es la siguiente:

```r
if (condición) {
  # Código si la condición es TRUE
} else {
  # Código si la condición es FALSE
}
```

Un ejemmplode uso de `if else` en R es el siguiente:

Si queremos que se muestre un mensaje en pantalla si la variable x es mayor que 5, y otro mensaje si la variable x es menor o igual que 5, podemos hacer lo siguiente:

```r
x <- 10
if (x > 5) {
  print("x es mayor que 5")
}
```


#### if else if

- A veces, queremos evaluar múltiples condiciones.
- Para esto, usamos la estructura `if else if`, que significa "si no es verdadero, entonces evalúa esta otra condición".
- La sintaxis básica de un `if else if` en R es la siguiente:

```r
if (condición1) {
  # Código si condición1 es TRUE
} else if (condición2) {
  # Código si condición2 es TRUE
} else {
  # Código si ninguna condición es TRUE
}
```
Un ejemmplode uso de `else if` en R es el siguiente:

Si queremos que se muestre un mensaje en pantalla si la variable x es mayor que 5, otro mensaje si la variable x es igual que 5, y otro mensaje si la variable x es menor, podemos hacer lo siguiente:

```r
x <- 5
if (x > 5) {
  print("x es mayor que 5")
} else if (x == 5) {
  print("x es igual que 5")
} else {
  print("x es menor que 5")
}
```


### Estructuras de control iterativas
- A veces, queremos que ciertas partes del código se repitan varias veces.
- Para esto, usamos estructuras de control iterativas, que permiten repetir un bloque de código mientras se cumpla una condición específica.
- Las estructuras de control iterativas más comunes son `for` y `while`.
- `for` se usa cuando sabemos cuántas veces queremos que se repita un bloque de código.
- `while` se usa cuando no sabemos cuántas veces queremos que se repita un bloque de código.
- La estructura de `for` en R es la siguiente:

```r
for (i in <valor_inicial>:<valor_final>) {
    ...Acción/es...
}
```
- La letra i se usa para representar la cantidad de repeticiones.
- Por ejemplo, si queremos repetir un bloque de código 5 veces, escribimos `for (i in 1:5)`.
- En este ejemplo, vamos a pedirle a Karel que llene los 5 agujeros.

![](https://ropensci.github.io/karel/articles/21.png)

- Sin utilizar la función `for`, tendríamos que escribir el siguiente código:

```{r}
generar_mundo("mundo003")
avanzar()
llenar_agujero()
avanzar()

avanzar()
llenar_agujero()
avanzar()

avanzar()
llenar_agujero()
avanzar()

avanzar()
llenar_agujero()
avanzar()

avanzar()
llenar_agujero()
avanzar()
ejecutar_acciones()
```

- Ahora, vamos a usar la estructura de control `for` para que Karel llene los

```{r}
generar_mundo("mundo003")
for (i in 1:5) {
  avanzar()
  llenar_agujero()
  avanzar()
}
ejecutar_acciones()
```

![](https://ropensci.github.io/karel/articles/22.gif)

- Por otro lado, la estructura de `while` en R es la siguiente:

```r
while (condición) {
    ...Acción/es a repetir...
}
```
- Estas iteraciones pueden continuar mientras que se verifique alguna condición.
- el conjunto de instrucciones se repite mientras que se siga evaluando como VERDADERO una condición declarada al inicio del bloque.
- Cuando la condición ya no se cumple, el proceso deja de ejecutarse.
- En vez de usar un for en el cual hay que especificar la cantidad de veces que el proceso debe repetirse, podemos usar un while para que Karel siga rellenando agujeros mientras que no haya una pared enfrente suyo.

```{r}
generar_mundo("mundo003")
while (frente_abierto()) {
  avanzar()
  llenar_agujero()
  avanzar()
}
ejecutar_acciones()
```

- En este caso, Karel seguirá avanzando y rellenando agujeros hasta que haya una pared enfrente suyo.
- Observa que en este caso no sabemos cuántas veces Karel tendrá que avanzar y rellenar agujeros, por lo que es más conveniente usar un `while` en lugar de un `for`.

::: {.callout-warning}
- Es importante tener cuidado con las estructuras de control iterativas, ya que si no se especifica una condición de salida, el programa podría entrar en un bucle infinito.
- Observa lo que pasa en el siguiente código.
- Como es un loop infinito, tendrás que parar el código manualmente. Esto se hace presionando el botón de interrupción en la consola de R.

```r
# No correr esto! (o sí, para ver cómo no anda!)
generar_mundo("mundo003")
while (no_hay_cosos()) {
    girar_izquierda()
}
ejecutar_acciones()
```
:::

# Ejercicios

## Crea funciones

Intenta crear las funciones que se te piden a continuación. Si tienes problemas, puedes ver las soluciones.

**Avanzar hasta encontrarse con una pared**
- llama la función `avanzar_hasta_pared()` que permita que Karel avanzar hasta que encuentre una pared.

::: {.callout collapse="true"}
```{r}
#| code-fold: true
#| code-summary: "Mostrar Respuesta"
# Función: avanzar_hasta_pared()
# Descripción: permite que Karel avance hasta que encuentre una pared
# Condición inicial: ninguna
# Condición final: Karel queda enfrentada a una pared
avanzar_hasta_pared <- function() {
  while (frente_abierto()) {
    avanzar()
  }
}
```
:::

**Recolectar una línea de cosos**
- Crea una función que permite recolectar una línea consecutiva de cosos. La línea termina en la primera celda que no tiene cosos.
- llama la función `recolectar_linea()`

::: {.callout collapse="true"}
```{r}
#| code-fold: true
#| code-summary: "Mostrar Respuesta"

# Función: recolectar_linea()
# Descripción: permite recolectar una línea consecutiva de cosos. La línea
# termina en la primera celda que no tiene cosos.
# Condición inicial: ninguna
# Condición final: Karel está en el final de la línea con la misma dirección que
# al inicio
recolectar_linea <- function() {
  while (hay_cosos()) {
    juntar_coso()
    if (frente_abierto()) {
      avanzar()
    }
  }
}
```
:::

**Poner todos los cosos que tiene en la mochila en un lugar**
- En este caso, Karel debe poner todos los cosos que tiene en la mochila en un lugar específico.
- llama la funcón `colocar_todo()`

::: {.callout collapse="true"}
```{r}
#| code-fold: true
#| code-summary: "Mostrar Respuesta"

# Función: colocar_todo()
# Descripción: Karel coloca todos los cosos que tiene en su mochila en su
# posición actual
# Condición inicial: ninguna
# Condición final: ninguna
colocar_todo <- function() {
  while (karel_tiene_cosos()) {
    poner_coso()
  }
}
```
:::

***Ponlo en práctica***

- En el mundo `mundo008`, no hay paredes en el mundo de Karel pero en algunas avenidas hay columnas de cosos de cualquier altura, mientras que otras avenidas están vacías.


### Laberinto
- Karel está en un laberinto como el siguiente, donde el coso indica la salida.

![](https://ropensci.github.io/karel/articles/29.png)

- Tip: Hay una estrategia para resolver cualquier laberinto: si cuando entrás tocás con tu mano la pared a tu derecha y caminás sin dejar de tocarla nunca, eventualmente llegarás a la salida. 
- implementa el algoritmo de la mano derecha que le ayude a Karel salir del laberinto del mundo `mundo009`.

![](https://ropensci.github.io/karel/articles/30.gif)

::: {.callout}
```{r}
#| code-fold: true
#| code-summary: "Mostrar Respuesta"
generar_mundo("mundo009")
while (frente_abierto()) {
  if (derecha_libre()) {
    girar_derecha()
  } else {
    girar_izquierda()
  }
  avanzar()
}
ejecutar_acciones()
```
```{r}
#| code-fold: true
#| code-summary: "Mostrar Respuesta"
generar_mundo("mundo009")
while (no_hay_cosos()) {
  girar_derecha()
  while (frente_cerrado()) {
    girar_izquierda()
  }
  avanzar()
}
ejecutar_acciones()
```

:::