---
title: "Plots comparar medias"
author:
  - name: "Mtro. Santiago Ríos"
    email: santiagoboo99@gmail.com
    affiliation: 
      - name: Cursos Orca
        city: CDMX
        url: orcaasesina.com
format: 
    live-html:
        highlightStyle: github
        highlightLines: true
        theme: superhero
toc: true
sidebar: false
webr:
    packages: 
        - tidyverse
        - ggpubr
        - car
    render-df: gt-interactive
engine: knitr
---

Box plots and violin plots

```{r}
# Load data
data("ToothGrowth")
df <- ToothGrowth
head(df, 4)
```

```{r}
# Box plots with jittered points
# :::::::::::::::::::::::::::::::::::::::::::::::::::
# Change outline colors by groups: dose
# Use custom color palette
# Add jitter points and change the shape by groups
 p <- ggboxplot(df, x = "dose", y = "len",
                color = "dose", palette =c("#00AFBB", "#E7B800", "#FC4E07"),
                add = "jitter", shape = "dose")
 p
```

```{r}
 # Add p-values comparing groups
 # Specify the comparisons you want
my_comparisons <- list( c("0.5", "1"), c("1", "2"), c("0.5", "2") )
p + stat_compare_means(comparisons = my_comparisons)+ # Add pairwise comparisons p-value
  stat_compare_means(label.y = 50)                   # Add global p-value
```

```{r}
# Violin plots with box plots inside
# :::::::::::::::::::::::::::::::::::::::::::::::::::
# Change fill color by groups: dose
# add boxplot with white fill color
ggviolin(df, x = "dose", y = "len", fill = "dose",
         palette = c("#00AFBB", "#E7B800", "#FC4E07"),
         add = "boxplot", add.params = list(fill = "white"))+
  stat_compare_means(comparisons = my_comparisons, label = "p.signif")+ # Add significance levels
  stat_compare_means(label.y = 50)
```

bar plots

Bar plots
Demo data set

Load and prepare data:

```{r}

# Load data
data("mtcars")
dfm <- mtcars
# Convert the cyl variable to a factor
dfm$cyl <- as.factor(dfm$cyl)
# Add the name colums
dfm$name <- rownames(dfm)
# Inspect the data
head(dfm[, c("name", "wt", "mpg", "cyl")])
```


Ordered bar plots

Change the fill color by the grouping variable “cyl”. Sorting will be done globally, but not by groups.

```{r}

ggbarplot(dfm, x = "name", y = "mpg",
          fill = "cyl",               # change fill color by cyl
          color = "white",            # Set bar border colors to white
          palette = "jco",            # jco journal color palett. see ?ggpar
          sort.val = "desc",          # Sort the value in dscending order
          sort.by.groups = FALSE,     # Don't sort inside each group
          x.text.angle = 90           # Rotate vertically x axis texts
          )
```

Sort bars inside each group. Use the argument sort.by.groups = TRUE.
```{r}

ggbarplot(dfm, x = "name", y = "mpg",
          fill = "cyl",               # change fill color by cyl
          color = "white",            # Set bar border colors to white
          palette = "jco",            # jco journal color palett. see ?ggpar
          sort.val = "asc",           # Sort the value in dscending order
          sort.by.groups = TRUE,      # Sort inside each group
          x.text.angle = 90           # Rotate vertically x axis texts
          )

```
Deviation graphs

The deviation graph shows the deviation of quantitative values to a reference value. In the R code below, we’ll plot the mpg z-score from the mtcars dataset.

Calculate the z-score of the mpg data:

# Calculate the z-score of the mpg data
dfm$mpg_z <- (dfm$mpg -mean(dfm$mpg))/sd(dfm$mpg)
dfm$mpg_grp <- factor(ifelse(dfm$mpg_z < 0, "low", "high"), 
                     levels = c("low", "high"))
# Inspect the data
head(dfm[, c("name", "wt", "mpg", "mpg_z", "mpg_grp", "cyl")]

Create an ordered bar plot, colored according to the level of mpg:

ggbarplot(dfm, x = "name", y = "mpg_z",
          fill = "mpg_grp",           # change fill color by mpg_level
          color = "white",            # Set bar border colors to white
          palette = "jco",            # jco journal color palett. see ?ggpar
          sort.val = "asc",           # Sort the value in ascending order
          sort.by.groups = FALSE,     # Don't sort inside each group
          x.text.angle = 90,          # Rotate vertically x axis texts
          ylab = "MPG z-score",
          xlab = FALSE,
          legend.title = "MPG Group"
          )

Rotate the plot: use rotate = TRUE and sort.val = “desc”

ggbarplot(dfm, x = "name", y = "mpg_z",
          fill = "mpg_grp",           # change fill color by mpg_level
          color = "white",            # Set bar border colors to white
          palette = "jco",            # jco journal color palett. see ?ggpar
          sort.val = "desc",          # Sort the value in descending order
          sort.by.groups = FALSE,     # Don't sort inside each group
          x.text.angle = 90,          # Rotate vertically x axis texts
          ylab = "MPG z-score",
          legend.title = "MPG Group",
          rotate = TRUE,
          ggtheme = theme_minimal()
          )

The bars (or symbols) and error-bar lines may represent
any user-entered center and variability values. Both symmetric and asymmetric error bars may be entered

```{r}
# Load necessary libraries
library(ggplot2)
library(dplyr)

# Calculate means and standard errors
iris_summary <- iris %>%
  group_by(Species) %>%
  summarise(
    SepalWidthMean = mean(Sepal.Width),
    SepalWidthSE = sd(Sepal.Width) / sqrt(n())
  )

# Plot 1: One Factor, Bars
plot1 <- ggplot(iris_summary, aes(x = Species, y = SepalWidthMean)) +
  geom_bar(stat = "identity", fill = "red", color = "black") +
  geom_errorbar(aes(ymin = SepalWidthMean - SepalWidthSE, ymax = SepalWidthMean + SepalWidthSE), 
                width = 0.2, color = "black") +
  labs(title = "One Factor, Bars", x = "Iris", y = "SepalWidth") +
  theme_minimal()

# Plot 2: One Factor, Symbols
plot2 <- ggplot(iris_summary, aes(x = Species, y = SepalWidthMean, color = Species)) +
  geom_point(size = 4) +
  geom_errorbar(aes(ymin = SepalWidthMean - SepalWidthSE, ymax = SepalWidthMean + SepalWidthSE), 
                width = 0.2) +
  scale_color_manual(values = c("red", "blue", "green")) +
  labs(title = "One Factor, Symbols", x = "Iris", y = "SepalWidth") +
  theme_minimal()

# Arrange plots side by side
library(gridExtra)
grid.arrange(plot1, plot2, ncol = 2)

```


```{r}
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(gridExtra)

# Transform the data to long format
iris_long <- iris %>%
  pivot_longer(cols = -Species, names_to = "Variable", values_to = "Value") %>%
  group_by(Species, Variable) %>%
  summarise(
    Mean = mean(Value),
    SE = sd(Value) / sqrt(n())
  )

# Plot 1: Two Factors, Bars
plot1 <- ggplot(iris_long, aes(x = Variable, y = Mean, fill = Species)) +
  geom_bar(stat = "identity", position = "dodge") +
  geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE), 
                position = position_dodge(0.9), width = 0.2) +
  scale_fill_manual(values = c("red", "blue", "green")) +
  labs(title = "Two Factors, Bars", x = "Variable", y = "Mean") +
  theme_minimal()

# Plot 2: Two Factors, Symbols
plot2 <- ggplot(iris_long, aes(x = Variable, y = Mean, color = Species)) +
  geom_point(position = position_dodge(0.5), size = 4) +
  geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE), 
                position = position_dodge(0.5), width = 0.2) +
  scale_color_manual(values = c("red", "blue", "green")) +
  labs(title = "Two Factors, Symbols", x = "Variable", y = "Mean") +
  theme_minimal()

# Arrange plots side by side
grid.arrange(plot1, plot2, ncol = 2)

```