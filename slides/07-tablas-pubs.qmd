---
title: "Plots comparar medias"
author:
  - name: "Mtro. Santiago Ríos"
    email: santiagoboo99@gmail.com
    affiliation: 
      - name: Cursos Orca
        city: CDMX
        url: orcaasesina.com
format: 
    live-html:
        highlightStyle: github
        highlightLines: true
        theme: superhero
toc: true
sidebar: false
webr:
    packages: 
        - tidyverse
        - ggpubr
        - car
    render-df: gt-interactive
engine: knitr
---

¡Claro! A continuación, te guiaré a través de los pasos para crear tablas listas para publicación en R, utilizando paquetes del tidyverse y otros paquetes útiles como `gt` y `flextable`. Estos paquetes te permitirán crear tablas elegantes y personalizables para incluir en documentos de tesis o artículos.

### Paso 1: Preparar el entorno de trabajo

Primero, necesitas instalar y cargar los paquetes necesarios. Si aún no los tienes instalados, puedes hacerlo con `install.packages()`.

```r
# Instalar paquetes necesarios
install.packages(c("dplyr", "gt", "flextable"))

# Cargar paquetes
library(dplyr)
library(gt)
library(flextable)
```

### Paso 2: Crear una tabla con `dplyr`

Supongamos que tienes un conjunto de datos y deseas resumirlo antes de presentarlo en una tabla. Usaremos `dplyr` para manipular los datos.

```r
# Crear un conjunto de datos de ejemplo
data <- data.frame(
  Categoria = c("A", "A", "B", "B"),
  Valores = c(10, 15, 20, 25)
)

# Resumir los datos
resumen <- data %>%
  group_by(Categoria) %>%
  summarise(Media = mean(Valores), Suma = sum(Valores))
```

### Paso 3: Crear una tabla con `gt`

El paquete `gt` es excelente para crear tablas atractivas y listas para publicación.

```r
# Crear una tabla usando gt
tabla_gt <- gt(resumen) %>%
  tab_header(
    title = "Resumen de Categorías",
    subtitle = "Media y Suma de Valores por Categoría"
  ) %>%
  fmt_number(
    columns = vars(Media, Suma),
    decimals = 2
  ) %>%
  tab_options(
    table.border.top.style = "solid",
    table.border.bottom.style = "solid"
  )

# Mostrar la tabla
print(tabla_gt)
```

### Paso 4: Crear una tabla con `flextable`

Si necesitas exportar tablas a Word o PowerPoint, `flextable` es una excelente opción.

```r
# Crear una tabla usando flextable
tabla_flextable <- flextable(resumen) %>%
  set_header_labels(
    Categoria = "Categoría",
    Media = "Media",
    Suma = "Total"
  ) %>%
  theme_vanilla() %>%
  autofit()

# Exportar a Word
library(officer)

doc <- read_docx() %>%
  body_add_flextable(tabla_flextable)

print(doc, target = "tabla_resumen.docx")
```

### Paso 5: Exportar la tabla

Dependiendo de tus necesidades, puedes exportar las tablas a diferentes formatos:

- **Para `gt`:** Puedes guardar la tabla como imagen o PDF utilizando `gtsave()`.

```r
# Guardar la tabla gt como PNG
gtsave(tabla_gt, filename = "tabla_resumen.png")

# Guardar la tabla gt como PDF
gtsave(tabla_gt, filename = "tabla_resumen.pdf")
```

- **Para `flextable`:** Ya hemos visto cómo exportar a Word, pero también puedes exportar a PowerPoint.

```r
# Exportar a PowerPoint
ppt <- read_pptx() %>%
  add_slide(layout = "Title and Content", master = "Office Theme") %>%
  ph_with_flextable(tabla_flextable, location = ph_location_type(type = "body"))

print(ppt, target = "tabla_resumen.pptx")
```

### Conclusión

Con estos pasos, puedes crear tablas elegantes y listas para publicación utilizando los paquetes `gt` y `flextable`. Estos paquetes ofrecen una gran cantidad de opciones para personalizar el diseño y exportar tablas en diferentes formatos, lo cual es crucial para presentar resultados de manera profesional en tesis o artículos académicos.